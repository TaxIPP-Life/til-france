entities:
    individus:
        processes:

            init_productivity:
                - dur_rest_ARE: 2 * (choi > 0)
                - productivity: 0
                # destinie (1991)
                # Roux (jusque 2002)
                - mincer : 7.6 + 0.08 * findet + 0.04 * xpr - 0.0006 * xpr*xpr
                - productivity: if(salaire_imposable > 0,
                            salaire_imposable * 0.5 - 1820 * mincer,
                            0)
                - productivity: if(
                    salaire_imposable <= 0,
                    normal(
                        loc = avg(productivity, filter=(salaire_imposable > 0)),
                        scale = std(productivity, filter=(salaire_imposable > 0))
                        ),
                    productivity
                    )

            #source: vos droits services public.fr
            chomage:
                ####### duree de versement
                # on la marque en annee mais le calcul est normalement en mois
                - entree_chom : ISUNEMPLOYED and not lag(ISUNEMPLOYED)
                # TODO: avoir une meilleure fonction que duration pour avoir toutes les
                # preriode d'emploi, la on a que la derniere, on mettra la periode d'evaluation plus tard
                - show('nombre d entree au chom', count(entree_chom))
                - workstate: if(entree_chom, CADRE, workstate)
                - dur_ver: if(
                    entree_chom,
                    if(
                        age < 50,
                        duration(ISINWORK and not WORK_INDEP),
                        duration(ISINWORK and not WORK_INDEP)
                        ),
                    0
                    )
                - dur_ver: dur_ver -1
                - workstate: if(entree_chom, UNEMPLOYED, workstate)
                # - show('nombre d'annees de d act', groupby(ISUNEMPLOYED,dur_ver))

                # maximum: c'est bien en vrai c'est 730 jours(=2 ans) + 365 jours(=1 ans)
                # ser supprime quand on aura une bonne fonction duration
                - dur_ver: min(dur_ver , 2 + 1*(age>=50))
                # minimum (ne sert a rien tant qu'on est en annee)
                # c'est en fait un condition d'eligibilite
                #122 jours = 4mois
                - dur_ver: if(dur_ver > 0.25, dur_ver, 0)

                # chomage partiel : 182 jours, pas dans le modele pour l'instant
                # convention chomage du 18 janvier 2006 au 31 mars 2009
                - dur_rest_ARE: if(entree_chom, dur_ver, dur_rest_ARE)
                # avant de baisser la duree par un on regarde des cas de prolongation
                # prolongation
                - prolong: (age > 61) and (duration(choi > 0) >= 1) # and d'atres truc
                #TODO: a completer quand on aura la fonction qui va bien (voir google group liam)
                - dur_rest_ARE: if(prolong and (dur_rest_ARE==1),
                                    2,
                                    dur_rest_ARE)
                - dur_rest_ARE: if((dur_rest_ARE > 0), dur_rest_ARE - 1, 0)

                ####### Montant de l'ARE
                # TODO: ajoute quotite quand dans le modele
                # TODO: parametres et bonne valeur
                #salaire journalier de reference -> faire tourner avant salaire toujours
                #34308 plafond de securite sociale en 2009
                - SJR: if(entree_chom, min(4 * 34308, salaire_imposable) / 365, 0)
                - AJ_ARE: 11.57 + 40.4 * SJR / 100
                # maximum et minimum
                - AJ_ARE: min(max(AJ_ARE, 57.4 * SJR / 100), 75 * SJR / 100)
                # passage au net
                # financement retraite complementaire
                - FRC: 3 / 100 * SJR
                # CSG et CRDS sont calcule dans la legislation openfisca
                # mais ce serait plus simple ici non ?
                # Pour l'instant on oublie meme si c'est mal
                # régime local d'assurance-maladie d'Alsace-Moselle

                - choi: if(
                    ISUNEMPLOYED and (dur_rest_ARE > 0),
                    if(entree_chom, AJ_ARE * 365, choi),
                    0
                    )
            retraite:
            # Actualisation du nombre d'enfants par régime
                - new_born: invl_mere.count(age_en_mois == 0) + invl_pere.count(age_en_mois == 0)
                - nb_enf_RG: if(WORK_PRIVE, nb_enf + new_born, nb_enf)
                - nb_enf_RSI: if(WORK_INDEP, nb_enf + new_born, nb_enf)
                - nb_enf_FP: if(WORK_PUBLIC, nb_enf + new_born, nb_enf)
                - nb_pac: invl_mere.count(age <= 18) + invl_pere.count(age <= 18)
                - date_depart: -1 #pension(filter = (age_en_mois > 12 * 55), varname = 'date_depart', regime = 'all')
                - to_be_retired: date_depart <= period and date_depart != -1 and not ISRETIRED

                - start_retirement: if(to_be_retired, period, start_retirement)
                - workstate: if(to_be_retired, RETIRED, workstate)

                - new_rsti: 0 #pension(filter = (age_en_mois > 12 * 55), varname = 'pension', regime = 'all')
                - revalo: 0
                - rsti: if(to_be_retired, new_rsti, rsti * (1 + revalo))
                - test: count(rsti > 0)

            salaire:
                - mincer: 0
                # destinie (1991)
                # demander les vrai coeff ci-dessous pour faire du non statique

                - anais: trunc(period / 100) - age
                - generation : 1 - max(0, min(1, (anais - 1935) / 35))
                - fet: max(0, min(26 - 14, findet - 14))
                - fer: -5 + 0.641 * fet + (1 - 0.641) / 12 * fet * fet
                    + 3.961 * generation + 0.0238 * fet * generation
                    - 0.0296 * generation * fet * fet
                - seuil_xpr : max(6 - xpr, 0)
                - seuil_anc : max(6 - anc, 0)
                - mincer: if(
                    WORK_PRIVE,
                    if(ISMALE,
                      -63.90
                      + 3.13 * xpr - 0.05 * xpr * xpr - 3.86 * seuil_xpr
                      + 1.95 * anc - 0.03 * anc * anc - 4.02 * seuil_anc -58.98 * (anc==1)
                      + 6.24 * fer
                      + 0.34 * fer * xpr -0.01 * fer * xpr * xpr + 0.53 * fer * seuil_xpr
                      + 0.43 * fer * anc -0.01 * fer *anc * anc - 0.48 * fer * seuil_anc,
                      - 66.42
                      + 1.10 * xpr - 0.02 * xpr * xpr - 2.48 * seuil_xpr
                      + 3.09 * anc - 0.04 * anc * anc - 4.70 * seuil_anc - 66.68 * (anc==1)
                      + 6.08 * fer
                      + 0.28 * fer * xpr - 0.01 * fer * xpr * xpr - 0.34 * fer * seuil_xpr
                      + 0.20 * fer * anc + 0.00 * fer * anc * anc + 0.16 * fer * seuil_anc),
                    mincer
                    )
                - mincer: if(
                    WORK_PUBLIC,
                    if(
                        ISMALE,
                        - 43.44
                        + 1.64 * xpr - 0.02 * xpr * xpr - 2.04 * seuil_xpr
                        + 1.21 * anc - 0.01 * anc * anc - 0.75 * seuil_anc - 17.31 * (anc == 1)
                        + 5.14 * fer
                        + 0.38 * fer * xpr + 0.00 * fer * xpr * xpr + 0.90 * fer * seuil_xpr
                        - 0.25 * fer * anc + 0.00 * fer * anc * anc + 0.00 * fer * seuil_anc,
                        - 26.92
                        + 0.44 * xpr + 0.00 * xpr * xpr + 1.21 * seuil_xpr
                        + 1.34 * anc - 0.01 * anc * anc - 0.84 * seuil_anc - 19.35 * (anc == 1)
                        + 4.08 * fer
                        + 0.26 * fer * xpr + 0.00 * fer * xpr * xpr + 0.42 * fer * seuil_xpr
                        - 0.18 * fer * anc + 0.00 * fer * anc * anc - 0.55 * fer * seuil_anc
                        ),
                    mincer
                    )
                - mincer: if(
                    WORK_INDEP,
                    if(ISMALE, -54.88, -63.8),
                    mincer
                    )
                #- csv(dump(),  fname='check_simul//mincer_{period}.csv')
                # SMPT
                - mincer: (7555 + 7593 + 7648 + 7706) * exp(mincer / 100)
                # corr i,t
                - miner: if(ISMALE, mincer * 1.08, mincer * 0.9)
                # le 0.5 pour passer au brut. Oui c'est moche
                # 15000=smic
                - salaire_imposable: if(
                    ISINWORK,
                    max(mincer * 0.5 - productivity, 15000),
                    0
                    )
            rev_cap:
                - capital_inc: l_men.wealth * 0.1 * (quimen == 1)
