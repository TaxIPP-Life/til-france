entities:
  individus:
    fields:
      - patrimoine: {type: float, initialdata: false}

    processes:
      deces:
        - decede: deces_selection()
        - statistiques_deces(decede)
        - heritage(decede)
        - deces_elimination(decede)

      deces_selection:
        - decede: if(
            ISMALE,
            logit_regr(0.0, align='parameters/population/hyp_mortaliteH.csv'),
            logit_regr(0.0, align='parameters/population/hyp_mortaliteF.csv')
            )
        # Par simplicite pour l'heritage (parce que pour le reste ca marche)
        # on ne fait mourir qu une seule personne
        # TODO: A retirer pour tester, ca doit etre bon maintenant
        - decede: if(l_partner.decede and l_partner.id < id, False, decede)
        - decede: if(l_pere.decede, False, decede)
        - decede: if(l_mere.decede, False, decede)
        - show('\nAge moyen des partenaires', avg(l_partner.age, filter=l_partner.age>-1))
        - return decede

        # Changement dans les regroupements (foyers_fiscaux et menages)
      menages_mise_a_jour_post_deces(decede):
        ### ménages
        - quimen: if(ORDINARY_HOUSE and l_partner.decede and l_partner.idmen == idmen and l_partner.quimen == 0, 0, quimen)
        # si pour les enfants assez jeunes, on cherche un autre parent (note, fonctionne si le parent est dans le ménage)
        - orph_pere: (l_pere.decede and (l_pere.idmen == idmen) and (quimen>1) and (age<20))
        - idmen: if(orph_pere and mere>-1 and not l_mere.decede, l_mere.idmen, idmen)
        - orph_mere: (l_mere.decede and (l_mere.idmen == idmen) and (quimen>1) and (age<20))
        - idmen: if(orph_mere and pere>-1 and not l_pere.decede, l_pere.idmen, idmen)
        # les enfants qui restent n'ont pas de deuxième parent ou bien sont assez vieux pour vivre seul.
        #   si on a plus  de 16 ans on vit tout seul
        - orph_indep: (
            (quimen>1) and
            (age > 15) and
            (
              l_pere.decede and (l_pere.idmen == idmen) and
              (mere == UNSET or (l_mere.idmen != idmen and age >= 20))
              ) or (
              l_mere.decede and
              (l_mere.idmen == idmen) and
              (pere == UNSET or (l_pere.idmen != idmen and age >= 20))
              )
            )
        - orph_dass: (
            (quimen>1) and
            (age <= 15) and
            (
              l_pere.decede and (l_pere.idmen == idmen) and mere == UNSET
              ) or (
              l_mere.decede and (l_mere.idmen == idmen) and pere == UNSET
              )
            )
        - idmen: if(orph_dass, DASS, idmen)
        - assertTrue( min(idmen) != -1)
        - live_together_c: l_partner.orph_indep and l_partner.idmen == idmen
        - live_together_p: l_pere.orph_indep and l_pere.idmen == idmen
        - live_together_m: l_mere.orph_indep and l_mere.idmen == idmen
        - idmen: if(
            orph_indep,
            new('menages', region_id = l_men.region_id, rent = l_men.rent / 1.5, pref = id),
            idmen
            )
        - idmen: if(live_together_c, l_partner.idmen, idmen)
        - idmen: if(live_together_p, l_pere.idmen, idmen)
        - idmen: if(live_together_m, l_mere.idmen, idmen)
        - quimen: if(orph_indep, 0, quimen)
        - quimen: if(live_together_c, 1, quimen)
        - quimen: if(live_together_p or live_together_m, 2, quimen)
        # Colocation (les enfants sont partis juste au-dessus)
        # dans ce cas, il faut trouver une nouvelle personne de référence
        - coloc: (l_men.l_pref.decede and l_men.l_pref.partner < 1 and
                    l_men.l_pref.id != pere and l_men.l_pref.id != mere and quimen>1)
        - show('\nles personnes qui vivaient avec des individus décédés mais sans lien de filiation avec eux étaient au nombre de', count(coloc))
        # le plus vieux devient personne de reference
        - quimen: if( coloc and id == l_men.get(individus.min(id, not decede)), 0, quimen)
        # et son patneroint devient quimen==1 du coup
        - quimen: if( l_partner.coloc and l_partner.idmen == idmen and l_partner.id == l_partner.l_men.get(individus.min(id, not decede)), 1, quimen)

      foyers_fiscaux_mise_a_jour_post_deces(decede):
        ### foyers_fiscaux
        - quifoy: if(l_partner.decede and l_partner.idfoy==idfoy and l_partner.quifoy == 0, 0, quifoy)
        # si pour les enfants assez jeunes, on cherche un autre parent (note, fonctionne si le parent est dans le ménage)
        - orph_pere: (l_pere.decede and (l_pere.idfoy == idfoy) and (quifoy>1) and (age<20))
        - idfoy: if(orph_pere and mere>-1 and not l_mere.decede, l_mere.idfoy, idfoy)
        - orph_mere: (l_mere.decede and (l_mere.idfoy == idfoy) and (quifoy>1) and (age<20))
        - idfoy: if(orph_mere and pere>-1 and not l_pere.decede, l_pere.idfoy, idfoy)
        # les enfants qui restent n'ont pas de deuxième parent ou bien sont assez vieux pour vivre seul.
        # si on a plus  de 16 ans on vit tout seul
        - orph_indep: (quifoy > 1) and (age > 15) and (
            (l_pere.decede and (l_pere.idfoy == idfoy) and mere == UNSET or (l_mere.idfoy != idfoy and age >=20)) or
            (l_mere.decede and (l_mere.idfoy == idfoy) and pere == UNSET or (l_pere.idfoy != idfoy and age >=20))
            )
        - orph_das: (quifoy>1) and (age <= 15) and (
            (l_pere.decede and (l_pere.idfoy == idfoy) and mere == UNSET) or
            (l_mere.decede and (l_mere.idfoy == idfoy) and pere == UNSET)
            )
        - remove(orph_das)
        - live_together_c: l_partner.orph_indep and l_partner.idfoy == idfoy
        - live_together_p: l_pere.orph_indep and l_pere.idfoy == idfoy
        - live_together_m: l_mere.orph_indep and l_mere.idfoy == idfoy
        - idfoy: if(
            orph_indep,
            new('foyers_fiscaux', pond = l_foy.pond, vous = id),
            idfoy
            )
        - idfoy: if(live_together_c, l_partner.idfoy, idfoy)

        - idfoy: if(live_together_p, l_pere.idfoy, idfoy)
        - idfoy: if(live_together_m, l_mere.idfoy, idfoy)
        - quifoy: if(orph_indep, 0, quifoy)
        - quifoy: if(live_together_c, 1, quifoy)
        - quifoy: if(live_together_p or live_together_m, 2, quifoy)

        # Colocation (les enfants sont partis juste au-dessus)
        # dans ce cas, il faut trouver une nouvelle personne de référence
        - coloc: (l_foy.l_vous.decede and l_foy.l_vous.partner < 1 and
                    l_foy.l_vous.id != pere and l_foy.l_vous.id != mere and quifoy>1)
        - show('les personnes qui vivaient avec un individus décédés mais sans lien de filiation avec lui était', count(coloc))
        # le plus vieux devient personne de reference
        - quifoy: if( coloc and id == l_foy.get(in_foyers_fiscaux.min(id, not decede)), 0, quifoy)
        # et son patneroint devient quifoy==1 du coup
        - quifoy: if( l_partner.coloc and l_partner.idfoy == idfoy and l_partner.id == l_partner.l_foy.get(in_foyers_fiscaux.min(id, not decede)), 1, quifoy)
        - return decede

      heritage(decede):
        # source: http://droit-finances.commentcamarche.net/contents/1000-succession-heritage-et-heritiers
        # if children....
        - individus2registre.vivant: if(decede, False, individus2registre.vivant)

        - nb_rang1: individus2registre.get(reg_inv_pere.count(vivant) + reg_inv_mere.count(vivant))
        # la ligne du dessus revient a : - rang1 : invl_pere.count() + invl_mere.count()
        # mais avec les vivant updater et donc gere les cas de deces simultane a priori
        #  individus2registre.herit_potentiel: not pere.vivant and

        #get : rang1
        #       rang2 = not rang + count(reg_inv_pere.count(vivant) + reg_inv_mere.count(vivant) >0 )
        #       rang3 =
        - nb_rang2: individus2registre.get(
            reg_inv_pere.count(
              not vivant and (
                reg_inv_pere.count(vivant) + reg_inv_mere.count(vivant) > 0
                )
              ) +
            reg_inv_mere.count(
              not vivant and (
                reg_inv_mere.count(vivant)  + reg_inv_mere.count(vivant) > 0
                )
              )
            )
        - nb_rang3: individus2registre.get(
            reg_inv_pere.count(
              not vivant and
              not (
                reg_inv_pere.count(vivant) + reg_inv_mere.count(vivant) > 0
                ) and
              (reg_inv_pere.count(
                reg_inv_pere.count(vivant) +
                reg_inv_mere.count(vivant)) +
                reg_inv_mere.count(
                  reg_inv_pere.count(vivant) + reg_inv_mere.count(vivant)
                  ) > 0
                )
              )
            )
        - show("\nNombre d'enfants vivants", groupby(decede, nb_rang1))
        - show("\nNombre d'enfants morts avec des enfants vivants", groupby(decede, nb_rang2))
        - show("\nNombre d'enfants morts avec  seulement des petits-enfants vivant", groupby(decede, nb_rang3))

        #### si partner
        # on fait l'hypothese de pas de donation au dernier vivant
        - nb_part_herit: nb_rang1 + nb_rang2 + nb_rang3
        - patrimoine: if(
            not decede and l_partner.decede,
            if(
              l_partner.nb_part_herit > 0,
              patrimoine + l_partner.patrimoine / 4,
              patrimoine + l_partner.patrimoine
              ),
            patrimoine
            )
        # on retire le patrimoine, de la personne decedée
        - patrimoine: if(
            decede and not l_partner.decede,
            if(nb_part_herit > 0, patrimoine * 3 / 4, 0),
            patrimoine
            )
        - individus2registre.heritage: if(
            decede and nb_part_herit > 0,
            individus2registre.heritage + patrimoine / nb_part_herit,
            individus2registre.heritage
            )
        # apres on fait une etape dans le registre
        - individus2registre.heritage_asc: if(
            decede and nb_part_herit == 0,
            individus2registre.heritage_asc + patrimoine,
            individus2registre.heritage_asc
            )

      deces_elimination(decede):
        # Suppression du decéde
        # enregistrement dans le registre et elimination de la table individus
        - civilstate: if(l_partner.decede and LEGAL_UNION, WIDOW, civilstate)
        - duree_en_couple: if(l_partner.decede, 0, duree_en_couple)
        - partner: if(l_partner.decede, UNSET, partner)
        - mere: if(l_mere.decede, UNSET, mere)
        - pere: if(l_pere.decede, UNSET, pere)
        - individus2registre.deces: if(decede, period, individus2registre.deces)
        - remove(decede)
        - assertEqual(max(l_men.get(individus.count(quimen == 0 and not decede))), 1)
        - assertTrue( min(idmen) != -1)
        - assertEqual(max(l_foy.get(in_foyers_fiscaux.count(quifoy == 0 and not decede))), 1)
        - assertTrue( min(idfoy) != -1)
        # - l_men.pref: if(quimen==0,id, l_men.pref)
        # - l_foy.vous: if(quifoy==0,id, l_foy.vous)

      statistiques_deces(decede):
        - csv(
            period, count(decede),
            fname = 'deces.csv', mode = 'a'
            )
        - show('\nNombre de décès (total = hommes + femmes)',
            count(decede) * uniform_weight, " = ",
            count(decede and ISMALE) * uniform_weight, " + ", count(decede and ISFEMALE) * uniform_weight
            )
        - show('\nAge moyen des hommes décédés', avg(age, filter=decede and ISMALE))
        - show('\nAge moyen des femmes décédées', avg(age, filter=decede and ISFEMALE))
        - show('\nNombre de veuves', sum(ISWIDOW) * uniform_weight)
