entities:
  individus:
    fields:
      - duree_en_couple: {type: float, initialdata: false, default 0}
      - duree_hors_couple: {type: int, initialdata: false, default 0}
      - civilstate: {type: int, initialdata: false}

    macros:
      MARRIED: 1
      SINGLE: 2
      DIVORCED: 3
      WIDOW: 4
      PACS: 5
      ISMARRIED: civilstate == 1
      ISSINGLE: civilstate == 2
      ISDIVORCED: civilstate == 3
      ISWIDOW: civilstate == 4
      ISPACS: civilstate == 5
      LEGAL_UNION: civilstate == 1 or civilstate == 5
      LEGAL_CELIB: civilstate == 2 or civilstate == 3 or civilstate == 4
      INCOUPLE: (partner > -1)

    processes:
      couple_initialisation:
        - assertEqual(count(partner > -1) , count(l_partner.partner > -1))
        - duree_en_couple: if(
            INCOUPLE,
            max(((age + l_partner.age) / 2 - 20), 0),
            0
            )
        - assertTrue(all((duree_en_couple == l_partner.duree_en_couple) or (l_partner.partner == UNSET)))
        - duree_hors_couple: 0  # TODO mieux initialiser cela
      # Michel DUÉE 2005
      # La modélisation des comportements démographiques dans le modèle de microsimulation DESTINIE
      # Document de travail INSEE
      # http://www.insee.fr/fr/publications-et-services/docs_doc_travail/G2005-15.pdf
      couple_formation:
        - nb_children_ind: invl_mere.count() + invl_pere.count()
        - candidat_couple: 0
        - age_corrige: age - (findet - 16) / 2  # On corrige l'age de fin d'etude
        - etudes_courtes: findet <= 20  # TODO: age moyen de sa generation
        - etudes_longues: findet > 20
        # Première mise en couple
        - candidat_couple: if(
            (age >= 18) and (age <= 90) and (not INCOUPLE) and ISSINGLE,
            if(
              ISMALE,
              logit_score(
                -73.10 + 8.96 * age_corrige - 0.408 * age_corrige ** 2 + 0.00796 * age_corrige ** 3
                - 5.72 / 100000 * (age_corrige ** 4) - 0.13 * etudes_courtes + 0.04 * etudes_longues
                + .264),  # cale Destinie
              logit_score(
                -68.49 + 9.06 * age_corrige -0.441 * age_corrige ** 2 + 0.00914 * age_corrige ** 3 - 6.91 / 100000 * (age_corrige ** 4) - 0.06 * etudes_longues
                )
              ),
            candidat_couple
            )
        # age à la séparation
        - age_separation: age - duree_hors_couple
        # Remise en couple
        - candidat_couple: if(
            (age >= 18) and (age <= 90) and (not INCOUPLE) and (not ISSINGLE),
            if(
              ISMALE,
              logit_score(
                -0.25 - 0.09 * duree_hors_couple + 0.19 * (duree_hors_couple == 0) - 0.05 * age_separation + 0.41 * (nb_children_ind == 0)
                - 0.19 * etudes_courtes
                ),
              logit_score(
                0.33 - 0.10 * duree_hors_couple + 0.14 * (duree_hors_couple == 0) - 0.08 * age_separation + 0.41 * (nb_children_ind == 0)
                - 0.57 * ISWIDOW
                )
              ),
            candidat_couple
            )
        - show("\nNombre de mises en couple potentielles pour les hommes",
            round(sum(candidat_couple * ISMALE * uniform_weight)),
            ' ou les femmes ', round(sum(candidat_couple * ISFEMALE * uniform_weight))
            )
        - candidat_couple_selectionne: align_abs(candidat_couple, method = "sidewalk", need = sum(candidat_couple))
        - show('\nNombre de mises en couple potentielles espérées avant sélection', sum(candidat_couple * uniform_weight))
        - show('\nNombre de mises en couple potentielles espérées après sélection', count(candidat_couple_selectionne * uniform_weight))
        - difficult_match: if(
            (candidat_couple_selectionne == 1) and ISFEMALE,
            abs(age - avg(age, filter = (candidat_couple_selectionne == 1) and ISMALE)),
            nan
            )
        - partner: if(
            candidat_couple_selectionne,
            matching(
              set1filter = ISFEMALE,
              set2filter = ISMALE,
              score = - 0.4893 * other.age + 0.0131 * other.age ** 2 - 0.0001 * other.age ** 3 + 0.0467 * (other.age - age) - 0.0189 * (other.age - age) ** 2 + 0.0003 * (other.age - age) ** 3 + 0.05 * (other.findet-findet),
              orderby = difficult_match
              ),
            partner
            )
        # - show('\nNombre de mises en couple réalisées (incestes conmpris)', count(candidat_couple_selectionne & INCOUPLE) * uniform_weight / 2)
        # on corrige les incestes qui n'ont pas ete interdit dans le matching
        # ca n'est pas bcp de cas, donc on considère que ça ne change pas les marges
        # et puis entre les marges et un tabou universel, on sacrifie les marges
        - partner: if((partner == pere or partner == mere), UNSET, partner)
        - partner: if((l_partner.pere == pere and pere > -1), UNSET, partner)
        - partner: if((l_partner.mere == mere and mere > -1), UNSET, partner)
        - partner: if(l_partner.partner == UNSET, UNSET, partner)
        - show('\nFlux brut de personnes nouvellement en couple', count(candidat_couple_selectionne & INCOUPLE) * uniform_weight)
        - show('\nNombre de personnes en couple', count(INCOUPLE) * uniform_weight)
        # - in_new_couple: if(INCOUPLE and (duree_en_couple == 0), True, False)
        # - duree_en_couple: if(INCOUPLE and not(in_new_couple), duree_en_couple + 1, 0)
        # - duree_en_couple: if(in_new_couple, 0, duree_en_couple)
        - duree_en_couple: if(INCOUPLE, duree_en_couple + 1, 0)
        - duree_hors_couple: if(INCOUPLE, 0, duree_hors_couple) # NOTE : duree_hors_couple is incremented in rupture
        - assertEqual(count(partner > -1) , count(l_partner.partner > -1))
        - assertTrue(all((duree_en_couple == l_partner.duree_en_couple) or (partner == UNSET)))


      move_together:
        # on emmenage en fonction de la durée du couple (faire jouer l'age ?)
        # si un des deux est pref et pas l'autre ou si on est un homme et que l'autre est pref
        - to_move_together: INCOUPLE and (duree_en_couple > 1)
        - assertTrue(all((to_move_together == l_partner.to_move_together) or (l_partner.partner == UNSET)))
        # on s'assure qu'on ne vit pas déjà ensemble
        - to_move_together: if((quimen==1 or l_partner.quimen==1) and to_move_together and l_partner.to_move_together, False, to_move_together)
        - to_move_together: if(quimen==2 and l_partner.quimen==2 and idmen==l_partner.idmen, False, to_move_together)
        - assertEqual( count(to_move_together) , count(l_partner.to_move_together))
        - assertTrue( count(to_move_together) % 2 == 0 )
        # select who move into the other's house
        # if only one is quimen==0 it's she or he, otherwise, we select the smallest ID.
        - move_in: if(
            to_move_together and l_partner.quimen == 0,
            if(
              quimen > 0,
              True,
              if(id < l_partner.id, True, False)
              ),
            False
            )
        # to move_out_together (when there is no quimen=0)
        - move_together: to_move_together and l_partner.quimen > 0 and quimen > 0
        # to move_in
        - new_men: if(move_in, l_partner.idmen, idmen)
        - quimen: if(move_in, 1, quimen)
        # to move_out
        - who_pref: move_together and id < l_partner.id
        - new_men: if(
            move_together and who_pref,
            new(
              'menages',
              filter = move_together and who_pref,
              region_id = choice([0, 1, 2, 3], [0.1, 0.2, 0.3, 0.4]),
              rent = 1500,
              pref = id),
           new_men
           )
        - new_men: if(move_together and not who_pref, l_partner.new_men, new_men)
        - quimen: if(move_together and who_pref, 0, quimen)
        - quimen: if(move_together and not who_pref, 1, quimen)
        # enfant et autres personnes (suivant le couple)
        - new_men: if(
            l_mere.to_move_together and (new_men == idmen) and quimen > 0,
            if(l_mere.idmen == idmen, l_mere.new_men, new_men),
            new_men
            )
        - new_men: if(
            l_pere.to_move_together and (new_men == idmen) and quimen > 0,
            if(l_pere.idmen == idmen, l_pere.new_men, new_men),
            new_men
            )
        - new_men: if(
            l_tuteur.to_move_together and (new_men == idmen) and quimen > 0,
            if(l_tuteur.idmen == idmen, l_tuteur.new_men, new_men),
            new_men
            )
        # autres, qui ne sont pas a new_men == idmen parce que leur parent est reste
        # penser aux petits enfants mais aussi aux parents à charges
        - new_men: if(
            (quimen > 1) and (new_men == idmen),
            l_men.l_pref.new_men,
            new_men
            )
        - idmen: new_men
        # - test : l_men.get(individus.count(quimen==0))
        # - csv(dump(id, to_move_together, move_in, age, sexe, l_partner.id, l_partner.age, duree_en_couple, quimen , l_partner.duree_en_couple, l_partner.quimen,  l_partner.to_move_together, l_partner.partner,
        #      test, pere, mere, idmen, tuteur, filter=(test!=1)), fname='perso2_{period}.csv')
        - assertEqual(max(l_men.get(individus.count(quimen==0))), 1)
        - assertTrue(min(idmen) >= 0)

      legal_union:
        # on s'assure qu'on n'en n'a pas déjà un (voir plus tard pour le passage de pacs à mariage) TODO:
        - to_move_together: INCOUPLE and (not LEGAL_UNION) and (duree_en_couple > 2)
        # select who move into the other's house
        # if only one is quifoy==0 it's she or he, otherwise, we select the smallest ID.
        # - csv(dump(id, to_move_together, sexe, l_partner.id, l_partner.age, duree_en_couple, quifoy , l_partner.duree_en_couple, l_partner.quifoy,  l_partner.to_move_together, civilstate, l_partner.civilstate))
        - assertEqual(count(to_move_together), count(l_partner.to_move_together))
        - assertTrue(count(to_move_together) % 2 == 0 )

        - move_in: if(to_move_together, True, False)
        - move_in: if(
            to_move_together and l_partner.quifoy == 0,
            if(
              quifoy > 0,
              True,
              if(
                id < l_partner.id,
                True,
                False
              )
            ),
            False
            )
        - to_move_out:  to_move_together and (l_partner.quifoy > 0) and (quifoy > 0)
        - assertEqual(count(move_in) + count(to_move_out) / 2 , count(to_move_together) / 2)
        # to move_in
        - new_idfoy: if(move_in, l_partner.idfoy, idfoy)
        - quifoy: if(move_in, 1, quifoy)
        # to move_out_together
        - who_vous: to_move_together and id < l_partner.id
        - new_idfoy: if(
            to_move_together and who_vous,
            new('foyers_fiscaux', filter = to_move_together and who_vous,pond=l_foy.pond, vous= id),
            new_idfoy
            )
        - new_idfoy: if(to_move_together and not who_vous, l_partner.new_idfoy, new_idfoy)
        - quifoy: if(to_move_together and who_vous, 0, quifoy)
        - quifoy: if(to_move_together and not who_vous, 1, quifoy)
        # enfant
        - new_idfoy: if(
            l_mere.to_move_together and (new_idfoy == idfoy) and quifoy > 0,
            if(l_mere.idfoy == idfoy, l_mere.new_idfoy, new_idfoy),
            new_idfoy
            )
        - new_idfoy: if(
            l_pere.to_move_together and (new_idfoy == idfoy) and quifoy>0,
            if(l_pere.idfoy == idfoy, l_pere.new_idfoy, new_idfoy),
            new_idfoy
            )
        - new_idfoy: if(
            l_tuteur.to_move_together and (new_idfoy == idfoy) and quifoy > 0,
            if(l_tuteur.idfoy == idfoy, l_tuteur.new_idfoy, new_idfoy),
            new_idfoy
            )
        # autres, qui ne sont pas a new_idfoy == idfoy parce que leur parent est reste
        # penser aux petits enfants
        - new_idfoy: if(
            (quifoy > 1) and (new_idfoy == idfoy),
            l_foy.l_vous.new_idfoy,
            new_idfoy
            )
        - idfoy: new_idfoy
        # TODO: dissocier pacs et mariage
        - show('\nNouveaux mariés', round(count(to_move_together and (civilstate != 1)) * uniform_weight))
        - show('\nAnciens mariés', round(count(civilstate == 1) * uniform_weight))
        - civilstate: if(to_move_together, MARRIED, civilstate)
        - show('\nTotal mariés', round(count(civilstate == 1) * uniform_weight))
        - assertEqual(max(l_foy.get(in_foyers_fiscaux.count(quifoy == 0))), 1)
        - assertTrue(min(idfoy) >= 0)

        # - csv(dump(id, age, sexe, l_partner.id, l_partner.age,
                   # l_partner.sexe, idmen, filter=justcoupled),
              # fname='check_simul//individu_{period}.csv')

        # - l_men.pref: if(quimen==0,id, l_men.pref)
        # - l_foy.vous: if(quifoy==0,id, l_foy.vous)
