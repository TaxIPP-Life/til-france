entities:
  individus:
    processes:
      naissance:
        - interm : invl_pere.count() # nombre d'enfant du pere
        - before_max: ((invl_mere.count() < 8) and (l_partner.interm < 8))
        #on pourra retirer cette condition qui était technique avec R.
        # Note, on n'a pas de jumeaux
        - future_mere: logit_regr(
            0.0,
            filter = ISFEMALE and (age >= 15) and (age <= 50) and before_max,
            align = 'parameters/population/Hyp_fecondite.csv'
            )
        # le niveau d'études de l'enfant est pré-determinée
        - annee: period
        - temp_pere: if(
            partner > 0,
            l_partner.findet +
            (l_partner.age > 35 + annee - 2009) +
            (l_partner.age > 45 + annee - 2009) + (l_partner.age > 55 + annee - 2009),
            0
            )
        - temp_mere: findet + (l_mere.age > 35 + annee - 2009) + (l_mere.age > 45 + annee - 2009) + (l_mere.age > 55 + annee - 2009)
        - findet_temp: if(partner > 0, trunc((temp_pere + temp_mere) / 2), temp_mere)
        - new('individus', filter = future_mere,
              mere = id,
              pere = partner,
              age = 0,
              age_en_mois = 0,
              partner = UNSET,
              civilstate = SINGLE,
              workstate = STUDENT,
              sexe = choice([MALE, FEMALE], [0.5122, 0.4878]),
              productivite = 0,
              salaire_imposable = 0,
              rsti = 0,
              choi = 0,
              idmen = idmen,
              quimen = 2,
              idfoy = idfoy,
              findet = findet_temp,
              wprm_init = wprm_init,
              quifoy = 2
              )
        - new('register', filter=(age == 0),
                id=id, sexe=sexe, pere=pere, mere=mere, vivant=True, naiss=period, findet=findet)
        - statistiques_naissances(future_mere)

      statistiques_naissances(future_mere):
        - csv(
            period, count(age==0),
            fname = 'naissances.csv', mode = 'a'
            )
        - show("\nAge moyen des mères de l'année", round(avg(age, filter=future_mere and ISFEMALE), 2))
        - show("\nAge moyen des pères de l'année", round(avg(l_partner.age, filter=future_mere and ISFEMALE and ISMARRIED), 2))
        - show("\nAge moyen de toutes les mères", round(avg(l_mere.age, filter=l_mere.age>-1), 2))  #la condition -1 permet de ne prendre que les vraies meres !
        - show("\nAge moyen de tous les pères", round(avg(l_pere.age, filter=l_pere.age>-1 ), 2))
        - show("\nNombre de naissances", round(count(age==0) * uniform_weight))
        - show("\nTaux de fécondité ", count(age==0) / count(ISFEMALE and (age >= 15) and (age <= 50)))
        # - show("\nIndice conjoncturel de fecondité ", sum(fecondite_by_age)) # TODO
