entities:
  individus:
    processes:
      couple_rupture:
        - agediff: if(ISFEMALE and INCOUPLE, age - l_partner.age, 0)
        - enfants_du_couple: invl_mere.count(target_filter = (pere == l_mere.partner) )
        - assertTrue(all(enfants_du_couple >= 0))
        - autres_enfants: invl_mere.count() - enfants_du_couple
        - assertTrue(all(autres_enfants >= 0))
        # Michel DUÉE 2005
        # La modélisation des comportements démographiques dans le modèle de microsimulation DESTINIE
        # Document de travail INSEE
        # http://www.insee.fr/fr/publications-et-services/docs_doc_travail/G2005-15.pdf
        # TODO: séparer rupture et divorce, séparer ruputre de gens en couple et divorce
        - etudes_courtes: findet < 21  # TODO age moyen de sa generation
        - probabilite_rupture_femme: if(
            ISFEMALE and INCOUPLE and (duree_en_couple > 0),
            logistic(
              -2.47 - 0.45 - 0.04 * duree_en_couple - 0.06 * (age - duree_en_couple) + 0.58 * (enfants_du_couple == 0) +
              0.21 * (enfants_du_couple == 1) + 0.13 * (enfants_du_couple > 3) + 0.41 * (autres_enfants > 0)
              + .09 * etudes_courtes),
            0
            ) # Dans Duée 2005 on ne précise pas si ce sont les études courtes de l'homme ou de la femme
        - show('\nNombre de ruptures avant tirage', sum(probabilite_rupture_femme))
        - rupture_femme: align_abs(
            probabilite_rupture_femme,
            need = sum(probabilite_rupture_femme),
            filter = ISFEMALE and INCOUPLE and (duree_en_couple > 0),
            method = "sidewalk"
            )
        - show('\nNombre de ruptures', sum(rupture_femme * uniform_weight))
        # Les deux partenaires rompent
        - rupture: rupture_femme or l_partner.rupture_femme
        - show('\nNombre de personnes ayant rompu', sum(rupture * uniform_weight))
        ### menages
        # smallest id move out from house
        # TODO: à améliorer en fonction de la propriété, de qui part et tout
        # si on est chez ses parents et que c'est eux les chef, c'est à l'autre de bouger : on les retire
        # TODO: retirer le quimen>1 ?
        - decohabitant: rupture and (l_partner.idmen == idmen)
        # on séléctionne au plus 1
        - decohabitant_restant: ((l_pere.idmen == idmen or l_mere.idmen == idmen) and (quimen > 1))
        - decohabitant_restant: if(
            l_partner.decohabitant_restant and decohabitant_restant,
            id < l_partner.id,
            decohabitant_restant
            )
        - decohabitant_partant: if(
            l_partner.decohabitant_restant or decohabitant_restant,
            l_partner.decohabitant_restant,
            id < l_partner.id
            )
        - decohabitant_partant: decohabitant_partant and decohabitant
        - assertEqual(count(decohabitant_partant), count(decohabitant) / 2)
        # pour les couples homosexuels, à ce niveau là, on peut avoir deux decohabitant
        - new_men: if(
            decohabitant_partant,
            new(
              'menages',
              filter = decohabitant,
              region_id = l_men.region_id,
              rent = l_men.rent / 1.5,
              pref = id
              ),
            idmen
            )
        - quimen: if(decohabitant and quimen == 1, 0, quimen)
        # enfants -> restent avec leur mère
        - new_men: if(
            l_mere.decohabitant and (l_mere.idmen == idmen) and (new_men == idmen),
            l_mere.new_men,
            if(
              l_pere.decohabitant and (l_pere.idmen == idmen) and (new_men == idmen),
              l_pere.new_men,
              new_men
              )
            )
        # les autres restent mais pourquoi ??...

        ###foy
        # biggest move out from foyers_fiscaux
        # on ajoute condition sur l_partner, pour ne pas appliquer aux couples non mariés
        - decohabitant_foy: rupture and l_partner.idfoy == idfoy
        # on séléctionne au plus 1
        - decohabitant_restant_foy: ((l_pere.idfoy == idfoy or l_mere.idfoy == idfoy) and (quifoy > 1))

        - decohabitant_restant_foy: if(
            l_partner.decohabitant_restant_foy and decohabitant_restant_foy,
            id < l_partner.id,
            decohabitant_restant_foy
            )
        - decohabitant_partant_foy: if(
            l_partner.decohabitant_restant_foy or decohabitant_restant_foy,
            l_partner.decohabitant_restant_foy,
            id < l_partner.id
           )
        - decohabitant_partant_foy: decohabitant_partant_foy and decohabitant_foy
        - assertEqual(count(decohabitant_partant_foy), count(decohabitant_foy) / 2)
        - new_foy: if(
            decohabitant_partant_foy,
            new(
              'foyers_fiscaux',
               filter = decohabitant_foy,
               pond = l_foy.pond,
               vous = id),
            idfoy
            )
        - quifoy: if(decohabitant and (quifoy == 1), 0, quifoy)
        # plus tard changer le vous ici directement

        # enfant
        # children go with....?? HYPOTHESIS
        # priority to fater...
        # TODO: do it randomly (but test if the couple are parents and not a second marriage)
        - new_foy: if(
            l_pere.decohabitant and (l_pere.idfoy == idfoy) and (new_foy == idfoy),
            l_pere.new_foy,
            if(
              l_mere.decohabitant and (l_mere.idfoy == idfoy) and (new_foy == idfoy),
              l_mere.new_foy,
              new_foy
              )
            )
        # les autres pac restent mais pourquoi ??...
        - idmen: new_men
        - idfoy: new_foy
        - civilstate: if(rupture and LEGAL_UNION, DIVORCED, civilstate)
        - partner: if(rupture, UNSET, partner)
        - duree_en_couple: if(not INCOUPLE, 0, duree_en_couple)
        - duree_hors_couple: if(not INCOUPLE, duree_hors_couple + 1, 0) # note : duree_en_couple est incrementée dans union

        # remplacera les etapes d'actualisation menage et foyers_fiscaux quand fonctionnel
        # - l_men.set(pref = individus.max(id, quimen==0)
        # - l_foy.set(vous = in_foyers_fiscaux.max(id,quifoy==0)

        # - l_men.pref: if(quimen==0, id, l_men.pref)
        # - l_foy.vous: if(quifoy==0, id, l_foy.vous)

        - assertEqual(max(l_men.get(individus.count(quimen==0))), 1)
        - assertTrue(min(idmen) >= 0)
        - assertEqual(max(l_foy.get(in_foyers_fiscaux.count(quifoy==0))), 1)
        - assertTrue(min(idfoy) >= 0)


      dump_info:
        - csv(dump(id, age, sexe, idmen, l_men.nb_individus, l_mere.age, l_partner.age), suffix = 'info')

      civilstate_changes:
        - show(groupby(civilstate, lag(civilstate)))
