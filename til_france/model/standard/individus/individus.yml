entities:
  individus:
    fields:
      # individual intrinseq
      - age_en_mois: int
      - age: {type: int, initialdata: false}
      - sexe: int
      - wprm_init: {type: int, initialdata: false}
      - naiss: {type: int, initialdata: false, default: 0}
      - data_origin: int
      # O: patrimoine, 1: handicap santé instittutions

      # l_men
      - idmen: int
      - quimen: int

      # foyer l_foy
      - idfoy: int
      - quifoy: int

      # family
      - pere: int
      - mere: int
      - partner: int
      - tuteur: int

      # work
      - rsti: float
      - tauxprime: float
      - start_retirement: {type: int, initialdata: false}

    links:
      l_men: {type: many2one, target: menages, field: idmen}
      l_foy: {type: many2one, target: foyers_fiscaux, field: idfoy}
      l_mere: {type: many2one, target: individus, field: mere}
      l_pere: {type: many2one, target: individus, field: pere}
      l_partner: {type: many2one, target: individus, field: partner}
      l_tuteur: {type: many2one, target: individus, field: tuteur}
      invl_mere: {type: one2many, target: individus, field: mere}
      invl_pere: {type: one2many, target: individus, field: pere}

      # possible transitions and regressions. The actual list used in the
      # simulation must be defined below
      homes: {type: one2many, target: menages, field: owner}

    macros:
      MALE: 0
      FEMALE: 1
      ISMALE: sexe == 0
      ISFEMALE: sexe == 1

      UNSET: -1

      # TODO: add others
      ORDINARY_HOUSE: (idmen > 9)
      DASS: 1
      INDASS: (idfoy == 1)
      # IS_LOWER_SECONDARY_EDU: education_niveau == 2
      # IS_UPPER_SECONDARY_EDU: education_niveau == 3
      # IS_TERTIARY_EDU: education_niveau == 4
      # LOWER_SECONDARY_EDU: 2
      # UPPER_SECONDARY_EDU: 3
      # TERTIARY_EDU: 4

    processes:
      init_weight_ind:
        - wprm_init: 1
        - month: randint(0, 11)
        - age: trunc(age_en_mois / 12)
        # - age_test_openfisca: openfisca_calculate('age_en_mois')
        # - assertEqual(age_test_openfisca, age)  # TODO REMOVE ME
        # - wprm_init: permet de faire des tests
        - wprm_init: 100 * age + month

      ageing:
        # - age_en_mois: add_time_scale(age_en_mois)
        #- age: trunc(age_en_mois / 12)
        - age: age + 1
        # - wprm_init: permet de faire des tests
        - data_origin: data_origin
        - wprm_init: lag(age_en_mois, 2)

      # Processus destiné à être abondé par les options
      options_initialisation:
        - 0

      # Statistiques de l'état initial
      statistiques_initialisation:
        - demographie_statistiques_initialisation()
        - autres_statistiques_initialisation()
        - options_statistiques_initialisation()

      autres_statistiques_initialisation:
        - csv(
            'period', 'population', 'naissance', 'salaire_imposable', 'rsti', 'choi','age moyen',
            fname = 'stat.csv'
            )
        - csv(
            'period', 'emploi_entree', 'inpublic', 'inprive', 'independant', 'chomage', 'students', 'retired',
            'other_inact',
            fname = 'workstate.csv'
            )
        - csv(
            'period', 'marie', 'celib', 'divorce', 'veuf', 'pacs', 'en_couple',
            fname='civilstate.csv'
            )

      demographie_statistiques_initialisation:
        - csv('period', 'naissances',
              fname = 'naissances.csv'
              )
        - csv('period', 'deces',
              fname = 'deces.csv'
              )
        - csv('period', 'migrations',
              fname = 'migrations.csv'
              )
        - csv('population',
              fname = 'population.csv'
              )
        - csv('population_by_period',
              fname = 'population2.csv'
              )

      # Processus destiné à être abondé par les options
      options_statistiques_initialisation:
        - 0

      # Statistiques calculées et sauvegardées à chaque fin de période
      statistiques_fin_de_periode:
        - demographie_statistiques_fin_de_periode()
        - autres_statistiques_fin_de_periode()
        - options_statistiques_fin_de_periode()

      autres_statistiques_fin_de_periode:
        - csv(
            period, count(), count(age==0), sum(salaire_imposable), sum(rsti), sum(choi), avg(age),
            fname = 'stat.csv', mode = 'a'
            )
        - csv(
            period, count(ISINWORK), count(WORK_PUBLIC), count(WORK_PRIVE), count(WORK_INDEP),
            count(ISUNEMPLOYED), count(ISSTUDENT), count(ISRETIRED), count(ISOTHERINACTIVE),
            fname = 'workstate.csv', mode = 'a'
            )
        - csv(
            period, count(ISMARRIED), count(ISSINGLE), count(ISDIVORCED), count(ISWIDOW),
            count(ISPACS), count(INCOUPLE),
            fname = 'civilstate.csv', mode = 'a'
            )

      demographie_statistiques_fin_de_periode:
        - csv('period', period, 'population',
            groupby(trunc(age / 10), sexe),
            fname = 'population2.csv', mode = 'a'
            )
        - csv('period', period, 'population',
            groupby(age, sexe),
            fname = 'population.csv', mode = 'a'
            )

      # Processus destiné à être abondé par les options
      options_statistiques_fin_de_periode:
        - 0

      check:
        - assertFalse(any(
          (pere == l_partner.pere) and (pere > -1)
          ))
        - assertFalse(any(
          (mere == l_partner.mere) and (mere > -1)
          ))
        - assertFalse(any(
          (pere == partner) and (pere > -1)
          ))
        - assertFalse(any(
          (mere == partner) and (mere > -1)
          ))
        # - errors: sum((id != l_partner.partner) and (partner > -1))
        # - show(errors)
        # - while (errors > 0):
        #   - show(dump(
        #       id,
        #       partner,
        #       l_partner.partner,
        #       id != l_partner.partner,
        #       partner > -1,
        #       civilstate,
        #       duree_hors_couple,
        #       duree_en_couple,
        #       sexe,
        #       filter = (
        #         (id != l_partner.partner) and (partner > -1)
        #         )
        #       ))
        #   - assertTrue(False)
        - assertTrue(all((duree_en_couple == l_partner.duree_en_couple) or (partner == UNSET)))
        - durees_incoherentes: sum(not(((duree_hors_couple >= 0) and (duree_en_couple < 0)) or (duree_hors_couple < 0)))
        - while (durees_incoherentes > 0):
          - show(groupby(civilstate, duree_hors_couple > -1))
          - show(groupby(civilstate, duree_en_couple > -1))
          - show(groupby(civilstate, duree_hors_couple > -1, duree_en_couple > -1))
          - show("\nDurees incoherentes à la période ", period)
          - assertTrue(False)
        - assertTrue(all((id == l_partner.partner) or (partner == UNSET)))
        - assertFalse(any(
          (civilstate != l_partner.civilstate) and LEGAL_UNION
          ))
