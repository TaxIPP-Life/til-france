entities:
    register:
        fields:
            - sexe:   int
            - vivant:  {type: bool, initialdata: False, default: True}
            - deces:   {type: int, initialdata: False}
            - naiss:   {type: int, initialdata: False}
            - migrant:   {type: int, initialdata: False}

            # family
            - pere:  int
            - mere:  int

            # education
            - findet: int

            # work
            - salaire_imposable: {type: float, initialdata: false, default: 0.0}
            - test: {type: float, initialdata: false, default: 0.0}
            - rsti: {type: float, initialdata: false, default: 0.0}
            - choi: {type: float, initialdata: false, default: 0.0}


            # legislation
            - salsuperbrut: {type: int, initialdata: false, default: 0}
            - cotsoc_noncontrib: {type: int, initialdata: false, default: 0}
            - cotsal_noncontrib: {type: int, initialdata: false, default: 0}
            - cotsoc_bar: {type: int, initialdata: false, default: 0}
            - cotsoc_lib: {type: int, initialdata: false, default: 0}
            - cotpat_contrib: {type: int, initialdata: false, default: 0}
            - cotpat_noncontrib: {type: int, initialdata: false, default: 0}
            - cotsal_contrib: {type: int, initialdata: false, default: 0}
            - cotsal: {type: int, initialdata: false, default: 0}
            # # fonctionnera quand on aura de l'individuslisation
            # - impo: {type: int, initialdata: false, default: 0}
            # - psoc: {type: int, initialdata: false, default: 0}
            # - mini: {type: int, initialdata: false, default: 0}
            # - pfam: {type: int, initialdata: false, default: 0}
            # - logt: {type: int, initialdata: false, default: 0}

            # legislation foyer fiscal
            - decote: {type: float, initialdata: false, default: 0.0}
            - irpp: {type: float, initialdata: false, default: 0.0}
            - isf_tot: {type: float, initialdata: false, default: 0.0}
            - avantage_qf: {type: float, initialdata: false, default: 0.0}

            # legislation menage
            - aah: {type: float, initialdata: false, default: 0.0}
            - caah: {type: float, initialdata: false, default: 0.0}
            - aeeh: {type: float, initialdata: false, default: 0.0}
            - aefa: {type: float, initialdata: false, default: 0.0}
            - af: {type: float, initialdata: false, default: 0.0}
            - cf: {type: float, initialdata: false, default: 0.0}
            - paje: {type: float, initialdata: false, default: 0.0}
            - al: {type: float, initialdata: false, default: 0.0}
            - alf: {type: float, initialdata: false, default: 0.0}
            - als: {type: float, initialdata: false, default: 0.0}
            - apl: {type: float, initialdata: false, default: 0.0}
            - ars: {type: float, initialdata: false, default: 0.0}
            - asf: {type: float, initialdata: false, default: 0.0}
            - api: {type: float, initialdata: false, default: 0.0}
            - apje: {type: float, initialdata: false, default: 0.0}
            - asi: {type: float, initialdata: false, default: 0.0}
            - aspa: {type: float, initialdata: false, default: 0.0}
            - rmi: {type: float, initialdata: false, default: 0.0}
            - rsa: {type: float, initialdata: false, default: 0.0}
            - rsa_socle: {type: float, initialdata: false, default: 0.0}

        # heritage
            - heritage:  {type: float, initialdata: False, default: 0.0}
            - heritage_asc:  {type: float, initialdata: False, default: 0.0}

        # # visualiser
            # - rang1:  {type: int, initialdata: False}
            # - rang2:  {type: int, initialdata: False}
            # - rang3:  {type: int, initialdata: False}

        links:
            reg2pers: {type: many2one, target: individus, field: id}
            reg_mere: {type: many2one, target: register, field: mere}
            reg_pere: {type: many2one, target: register, field: pere}
            reg_inv_mere:     {type: one2many, target: register, field: mere}
            reg_inv_pere:     {type: one2many, target: register, field: pere}

        processes:
            init_reg:
                - vivant: True
                - naiss: 2009 - reg2pers.age

            sum_indiv:
            # revenus
                - salaire_imposable: reg2pers.salaire_imposable + salaire_imposable
                - test: reg2pers.salaire_imposable
                - rsti: reg2pers.rsti + rsti
                - choi: reg2pers.choi + choi
            # legislation
                - salsuperbrut: reg2pers.salsuperbrut + salsuperbrut
                - cotsoc_noncontrib: reg2pers.cotsoc_noncontrib + cotsoc_noncontrib
                - cotsal_noncontrib: reg2pers.cotsal_noncontrib + cotsal_noncontrib
                - cotsoc_bar: reg2pers.cotsoc_bar + cotsoc_bar
                - cotsoc_lib: reg2pers.cotsoc_lib + cotsoc_lib
                - cotpat_contrib: reg2pers.cotpat_contrib + cotpat_contrib
                - cotpat_noncontrib: reg2pers.cotpat_noncontrib + cotpat_noncontrib
                - cotsal_contrib: reg2pers.cotsal_contrib + cotsal_contrib
                - cotsal: reg2pers.cotsal + cotsal
                # ci dessous, fonctionnera quand on aura shapley
                # - impo: reg2pers.impo + impo
                # - psoc: reg2pers.psoc + psoc
                # - mini: reg2pers.mini + mini
                # - pfam: reg2pers.pfam + pfam
                # - logt: reg2pers.logt + logt
                # on pourrait aussi ajouter les sommes d'Ã©tat

            # foyers_fiscaux
                - decote: if(reg2pers.quifoy<2,
                        reg2pers.l_foy.decote/reg2pers.l_foy.nb_adultes + decote,
                        decote)
                - irpp: if(reg2pers.quifoy<2,
                        reg2pers.l_foy.irpp/reg2pers.l_foy.nb_adultes + irpp,
                        irpp )
                - avantage_qf: if(reg2pers.quifoy>1,
                        reg2pers.l_foy.avantage_qf/reg2pers.l_foy.nb_pac +avantage_qf,
                        avantage_qf)
                - isf_tot: if(reg2pers.quifoy<2,
                        reg2pers.l_foy.isf_tot/reg2pers.l_foy.nb_adultes +isf_tot,
                        isf_tot)

            # famille
                - aah:   if(reg2pers.quimen<2,
                        reg2pers.l_men.aah/reg2pers.l_men.nb_adultes +aah,
                        aah)
                - caah:   if(reg2pers.quimen<2,
                        reg2pers.l_men.caah/reg2pers.l_men.nb_adultes + caah,
                        caah)
                # on zappe l aefa pour l instant
                # pas tres bien fait quand on vit avec les grands parents mais ca c'est parce que l'entite famille n'existe pas
                - af:   if( reg2pers.quimen>1 and reg2pers.l_men.af > 0,
                        reg2pers.l_men.af/reg2pers.l_men.nb_children_af + af ,
                        af)
                - cf:   if(reg2pers.quimen>1 and reg2pers.l_men.cf>0,
                        reg2pers.l_men.cf/reg2pers.l_men.nb_children_af +cf,
                        cf)
                - paje:   if(reg2pers.quimen>1 and reg2pers.l_men.paje>0,
                        reg2pers.l_men.paje/reg2pers.l_men.nb_children_af +paje,
                        paje)
                - apje:   if(reg2pers.quimen>1 and reg2pers.l_men.apje>0,
                        reg2pers.l_men.apje/reg2pers.l_men.nb_children_af +apje,
                        apje)
                - ars:   if(reg2pers.quimen>1 and reg2pers.l_men.ars>0,
                        reg2pers.l_men.af/reg2pers.l_men.nb_children_af +ars,
                        ars)
                - asf:   if(reg2pers.quimen>1and reg2pers.l_men.asf>0,
                        reg2pers.l_men.asf/reg2pers.l_men.nb_children_af +asf,
                        asf)

                - al:  reg2pers.l_men.al/reg2pers.l_men.nb_individus + al
                - alf:  reg2pers.l_men.alf/reg2pers.l_men.nb_individus + alf
                - als:  reg2pers.l_men.als/reg2pers.l_men.nb_individus + als
                - apl:  reg2pers.l_men.apl/reg2pers.l_men.nb_individus + apl
                - api:  reg2pers.l_men.api/reg2pers.l_men.nb_individus + api
                - asi:  reg2pers.l_men.asi/reg2pers.l_men.nb_individus + asi
                - aspa:  reg2pers.l_men.aspa/reg2pers.l_men.nb_individus + aspa
                - rmi:  reg2pers.l_men.rmi/reg2pers.l_men.nb_individus + rmi
                - rsa:  reg2pers.l_men.rsa/reg2pers.l_men.nb_individus + rsa

            alive:
                - vivant: (reg2pers.id>0)
